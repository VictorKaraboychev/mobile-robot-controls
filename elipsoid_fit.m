rawData = [
  -999.0000 -856.5000 -613.5000;
  -1012.5000 -909.0000 -600.0000;
  -985.5000 -856.5000 -657.0000;
  -825.0000 -622.5000 -717.0000;
  -738.0000 -388.5000 -654.0000;
  -685.5000 -297.0000 -591.0000;
  -600.0000 -148.5000 -378.0000;
  -630.0000 -118.5000 -285.0000;
  -702.0000 -157.5000 -94.5000;
  -667.5000 -364.5000 85.5000;
  -666.0000 -456.0000 150.0000;
  -688.5000 -711.0000 184.5000;
  -693.0000 -787.5000 177.0000;
  -694.5000 -937.5000 136.5000;
  -757.5000 -978.0000 118.5000;
  -757.5000 -1039.5000 90.0000;
  -753.0000 -1095.0000 9.0000;
  -735.0000 -1131.0000 -33.0000;
  -702.0000 -1135.5000 -103.5000;
  -666.0000 -1156.5000 -181.5000;
  -649.5000 -1149.0000 -226.5000;
  -499.5000 -1005.0000 -429.0000;
  -433.5000 -955.5000 -451.5000;
  -450.0000 -981.0000 -415.5000;
  -474.0000 -1090.5000 -274.5000;
  -589.5000 -1120.5000 -85.5000;
  -798.0000 -1134.0000 -28.5000;
  -865.5000 -1099.5000 -19.5000;
  -1192.5000 -949.5000 -63.0000;
  -1354.5000 -582.0000 -145.5000;
  -1248.0000 -280.5000 -451.5000;
  -1162.5000 -298.5000 -553.5000;
  -999.0000 -436.5000 -666.0000;
  -940.5000 -553.5000 -703.5000;
  -924.0000 -612.0000 -702.0000;
  -901.5000 -612.0000 -712.5000;
  -874.5000 -751.5000 -694.5000;
  -891.0000 -744.0000 -706.5000;
  -829.5000 -676.5000 -721.5000;
  -748.5000 -571.5000 -726.0000;
  -645.0000 -375.0000 -622.5000;
  -555.0000 -274.5000 -478.5000;
  -477.0000 -262.5000 -361.5000;
  -405.0000 -360.0000 -172.5000;
  -373.5000 -469.5000 -85.5000;
  -346.5000 -582.0000 -40.5000;
  -357.0000 -829.5000 -13.5000;
  -388.5000 -877.5000 -18.0000;
  -445.5000 -963.0000 0.0000;
  -499.5000 -1021.5000 -31.5000;
  -550.5000 -1027.5000 -67.5000;
  -535.5000 -1008.0000 -67.5000;
  -433.5000 -802.5000 -27.0000;
  -361.5000 -456.0000 -49.5000;
  -373.5000 -324.0000 -51.0000;
  -438.0000 -204.0000 -117.0000;
  -582.0000 -94.5000 -301.5000;
  -747.0000 -198.0000 -577.5000;
  -810.0000 -298.5000 -640.5000;
  -843.0000 -429.0000 -699.0000;
  -879.0000 -757.5000 -702.0000;
  -900.0000 -807.0000 -694.5000;
  -891.0000 -823.5000 -676.5000;
  -834.0000 -742.5000 -708.0000;
  -757.5000 -733.5000 -711.0000;
  -688.5000 -748.5000 -693.0000;
  -490.5000 -820.5000 -540.0000;
  -415.5000 -843.0000 -492.0000;
  -373.5000 -847.5000 -405.0000;
  -297.0000 -805.5000 -271.5000;
  -288.0000 -783.0000 -190.5000;
  -285.0000 -793.5000 -112.5000;
  -343.5000 -747.0000 -19.5000;
  -378.0000 -757.5000 24.0000;
  -432.0000 -738.0000 78.0000;
  -540.0000 -649.5000 150.0000;
  -793.5000 -652.5000 204.0000;
  -870.0000 -658.5000 180.0000;
  -976.5000 -649.5000 150.0000;
  -1072.5000 -616.5000 135.0000;
  -1242.0000 -670.5000 0.0000;
  -1309.5000 -765.0000 -76.5000;
  -1356.0000 -733.5000 -114.0000;
  -1365.0000 -748.5000 -139.5000;
  -1368.0000 -744.0000 -123.0000;
  -1374.0000 -729.0000 -85.5000;
  -1363.5000 -694.5000 -19.5000;
  -1140.0000 -441.0000 127.5000;
  -1032.0000 -397.5000 127.5000;
  -915.0000 -342.0000 94.5000;
  -814.5000 -315.0000 64.5000;
  -625.5000 -202.5000 -81.0000;
  -585.0000 -180.0000 -166.5000;
  -576.0000 -177.0000 -226.5000;
  -546.0000 -171.0000 -265.5000;
  -540.0000 -186.0000 -388.5000;
  -546.0000 -211.5000 -474.0000;
  -571.5000 -222.0000 -522.0000;
  -598.5000 -301.5000 -582.0000;
  -621.0000 -316.5000 -618.0000;
  -649.5000 -384.0000 -663.0000;
  -645.0000 -544.5000 -684.0000;
  -630.0000 -621.0000 -715.5000;
  -649.5000 -666.0000 -699.0000;
  -681.0000 -720.0000 -688.5000;
  -694.5000 -811.5000 -670.5000;
  -715.5000 -828.0000 -667.5000;
  -775.5000 -933.0000 -616.5000;
  -807.0000 -972.0000 -589.5000;
  -816.0000 -985.5000 -567.0000;
  -801.0000 -1005.0000 -553.5000;
  -784.5000 -1026.0000 -540.0000;
  -712.5000 -972.0000 -576.0000;
  -612.0000 -829.5000 -640.5000;
  -586.5000 -774.0000 -636.0000;
  -528.0000 -739.5000 -594.0000;
  -396.0000 -573.0000 -549.0000;
  -370.5000 -465.0000 -510.0000;
  -369.0000 -418.5000 -436.5000;
  -373.5000 -370.5000 -423.0000;
  -379.5000 -352.5000 -382.5000;
  -375.0000 -298.5000 -298.5000;
  -427.5000 -346.5000 -28.5000;
  -504.0000 -355.5000 19.5000;
  -513.0000 -361.5000 33.0000;
  -550.5000 -370.5000 63.0000;
  -585.0000 -348.0000 46.5000;
  -594.0000 -370.5000 67.5000;
  -580.5000 -384.0000 94.5000;
  -577.5000 -432.0000 87.0000;
  -555.0000 -481.5000 100.5000;
  -555.0000 -504.0000 99.0000;
  -558.0000 -580.5000 100.5000;
  -553.5000 -630.0000 121.5000;
  -585.0000 -927.0000 60.0000;
  -589.5000 -990.0000 27.0000;
  -577.5000 -1054.5000 -36.0000;
  -568.5000 -1099.5000 -157.5000;
  -549.0000 -1095.0000 -208.5000;
  -532.5000 -1107.0000 -276.0000;
  -522.0000 -1081.5000 -355.5000;
  -478.5000 -1071.0000 -279.0000;
  -483.0000 -1063.5000 -198.0000;
  -472.5000 -1039.5000 -130.5000;
  -486.0000 -915.0000 27.0000;
  -490.5000 -819.0000 81.0000;
  -496.5000 -496.5000 81.0000;
  -513.0000 -261.0000 -46.5000;
  -535.5000 -175.5000 -145.5000;
  -522.0000 -145.5000 -261.0000;
  -531.0000 -186.0000 -463.5000;
  -510.0000 -262.5000 -564.0000;
  -535.5000 -459.0000 -663.0000;
  -523.5000 -643.5000 -681.0000;
  -526.5000 -784.5000 -652.5000;
  -519.0000 -850.5000 -618.0000;
  -544.5000 -892.5000 -580.5000;
  -577.5000 -946.5000 -531.0000;
  -585.0000 -958.5000 -459.0000;
  -559.5000 -958.5000 -427.5000;
  -559.5000 -954.0000 -373.5000;
  -586.5000 -946.5000 -319.5000;
  -634.5000 -883.5000 -225.0000;
  -640.5000 -843.0000 -177.0000;
  -648.0000 -810.0000 -148.5000;
  -639.0000 -784.5000 -109.5000;
  -627.0000 -751.5000 -54.0000;
  -618.0000 -670.5000 10.5000;
  -621.0000 -454.5000 24.0000;
  -609.0000 -418.5000 10.5000;
  -603.0000 -319.5000 -28.5000;
  -585.0000 -265.5000 -76.5000;
  -562.5000 -247.5000 -60.0000;
  -540.0000 -252.0000 -81.0000;
  -537.0000 -234.0000 -76.5000;
  -532.5000 -199.5000 -117.0000;
  -559.5000 -184.5000 -423.0000;
  -571.5000 -220.5000 -492.0000;
  -627.0000 -409.5000 -675.0000;
  -667.5000 -600.0000 -690.0000;
  -672.0000 -676.5000 -694.5000;
  -681.0000 -640.5000 -711.0000;
  -684.0000 -492.0000 -688.5000;
  -661.5000 -319.5000 -604.5000;
  -634.5000 -204.0000 -508.5000;
  -636.0000 -136.5000 -352.5000;
  -693.0000 -148.5000 -100.5000;
  -793.5000 -184.5000 -33.0000;
  -895.5000 -265.5000 55.5000;
  -1009.5000 -384.0000 85.5000;
  -1075.5000 -490.5000 108.0000;
  -1122.0000 -513.0000 123.0000;
  -1120.5000 -582.0000 136.5000;
  -1102.5000 -706.5000 136.5000;
  -1098.0000 -969.0000 42.0000;
  -1089.0000 -1077.0000 -144.0000;
  -1090.5000 -1098.0000 -243.0000;
  -1111.5000 -1068.0000 -366.0000;
  -1107.0000 -1032.0000 -429.0000;
  -1108.5000 -933.0000 -531.0000;
  -1111.5000 -901.5000 -555.0000;
  -1113.0000 -874.5000 -558.0000;
  -1161.0000 -712.5000 -609.0000;
  -1140.0000 -594.0000 -634.5000;
  -1135.5000 -463.5000 -625.5000;
  -1090.5000 -247.5000 -546.0000;
  -1050.0000 -171.0000 -420.0000;
  -1066.5000 -117.0000 -252.0000;
  -1086.0000 -139.5000 -154.5000;
  -1107.0000 -208.5000 -22.5000;
  -1104.0000 -244.5000 4.5000;
  -1125.0000 -321.0000 54.0000;
  -1129.5000 -339.0000 67.5000;
  -1122.0000 -303.0000 46.5000;
  -1120.5000 -217.5000 -9.0000;
  -1089.0000 -193.5000 -54.0000;
  -1104.0000 -157.5000 -379.5000;
  -1129.5000 -193.5000 -442.5000;
  -1116.0000 -249.0000 -510.0000;
  -1095.0000 -339.0000 -573.0000;
  -1075.5000 -492.0000 -667.5000;
  -1014.0000 -739.5000 -658.5000;
  -945.0000 -801.0000 -663.0000;
  -892.5000 -702.0000 -715.5000;
  -846.0000 -600.0000 -717.0000;
  -649.5000 -540.0000 -645.0000;
  -456.0000 -537.0000 -505.5000;
  -361.5000 -559.5000 -406.5000;
  -292.5000 -600.0000 -319.5000;
  -276.0000 -630.0000 -252.0000;
  -283.5000 -681.0000 -112.5000;
  -306.0000 -703.5000 -40.5000;
  -360.0000 -720.0000 42.0000;
  -474.0000 -627.0000 112.5000;
  -522.0000 -568.5000 136.5000;
  -679.5000 -654.0000 193.5000;
  -913.5000 -729.0000 184.5000;
  -978.0000 -684.0000 180.0000;
  -1003.5000 -550.5000 171.0000;
  -985.5000 -531.0000 181.5000;
  -931.5000 -387.0000 127.5000;
  -874.5000 -330.0000 100.5000;
  -819.0000 -162.0000 -60.0000;
  -807.0000 -127.5000 -109.5000;
  -861.0000 -96.0000 -235.5000;
  -910.5000 -141.0000 -459.0000;
  -897.0000 -540.0000 -717.0000;
  -897.0000 -670.5000 -720.0000;
  -859.5000 -843.0000 -672.0000;
  -672.0000 -603.0000 -694.5000;
  -621.0000 -528.0000 -663.0000;
  -553.5000 -495.0000 -618.0000;
  -504.0000 -420.0000 -535.5000;
  -447.0000 -387.0000 -492.0000;
  -414.0000 -364.5000 -441.0000;
  -373.5000 -343.5000 -352.5000;
  -375.0000 -361.5000 -283.5000;
  -348.0000 -370.5000 -321.0000;
  -357.0000 -406.5000 -420.0000;
  -406.5000 -555.0000 -616.5000;
  -648.0000 -832.5000 -657.0000;
  -711.0000 -859.5000 -666.0000;
  -829.5000 -927.0000 -612.0000;
  -958.5000 -906.0000 -577.5000;
  -1062.0000 -900.0000 -540.0000;
  -1081.5000 -805.5000 -609.0000;
  -1054.5000 -433.5000 -618.0000;
  -1014.0000 -292.5000 -553.5000;
  -990.0000 -283.5000 -568.5000;
  -987.0000 -276.0000 -555.0000;
  -873.0000 -283.5000 -616.5000;
  -819.0000 -351.0000 -643.5000;
  -760.5000 -429.0000 -672.0000;
  -622.5000 -550.5000 -648.0000;
  -492.0000 -735.0000 -594.0000;
  -459.0000 -865.5000 -544.5000;
  -496.5000 -1044.0000 -393.0000;
  -531.0000 -1099.5000 -316.5000;
  -594.0000 -1135.5000 -243.0000;
  -765.0000 -1125.0000 -148.5000;
  -886.5000 -1084.5000 -94.5000;
  -940.5000 -1068.0000 -64.5000;
  -973.5000 -1057.5000 -58.5000;
  -1089.0000 -1032.0000 -157.5000;
  -1117.5000 -1021.5000 -213.0000;
  -1140.0000 -1017.0000 -262.5000;
  -1167.0000 -933.0000 -436.5000;
  -1167.0000 -861.0000 -531.0000;
  -1147.5000 -720.0000 -616.5000;
  -1099.5000 -609.0000 -634.5000;
  -1063.5000 -510.0000 -639.0000;
  -1054.5000 -436.5000 -643.5000;
  -958.5000 -249.0000 -550.5000;
  -852.0000 -193.5000 -514.5000;
  -661.5000 -231.0000 -499.5000;
  -490.5000 -369.0000 -463.5000;
  -406.5000 -483.0000 -456.0000;
  -370.5000 -591.0000 -456.0000;
  -339.0000 -793.5000 -450.0000;
  -438.0000 -1075.5000 -328.5000;
  -522.0000 -1116.0000 -256.5000;
  -720.0000 -1117.5000 -123.0000;
  -891.0000 -1026.0000 -28.5000;
  -933.0000 -1021.5000 -36.0000;
  -973.5000 -1017.0000 -28.5000;
  -1018.5000 -1005.0000 -51.0000;
  -1066.5000 -999.0000 -63.0000;
  -1140.0000 -987.0000 -112.5000;
  -1194.0000 -931.5000 -99.0000;
  -1207.5000 -900.0000 -91.5000;
  -1225.5000 -879.0000 -94.5000;
  -1239.0000 -873.0000 -94.5000;
  -1243.5000 -870.0000 -96.0000;
  -1264.5000 -895.5000 -153.0000;
  -1260.0000 -922.5000 -204.0000;
  -1264.5000 -913.5000 -225.0000;
  -1257.0000 -918.0000 -285.0000;
  -1248.0000 -895.5000 -348.0000;
  -1233.0000 -861.0000 -456.0000;
  -1219.5000 -819.0000 -499.5000;
  -1188.0000 -756.0000 -535.5000;
  -1144.5000 -631.5000 -591.0000;
  -1125.0000 -589.5000 -627.0000;
  -1084.5000 -550.5000 -631.5000;
  -1041.0000 -504.0000 -649.5000;
  -946.5000 -456.0000 -663.0000;
  -865.5000 -424.5000 -666.0000;
  -694.5000 -420.0000 -634.5000;
  -528.0000 -469.5000 -558.0000;
  -460.5000 -513.0000 -526.5000;
  -379.5000 -595.5000 -474.0000;
  -352.5000 -649.5000 -487.5000;
  -346.5000 -721.5000 -486.0000;
  -382.5000 -820.5000 -504.0000;
  -486.0000 -1039.5000 -441.0000;
  -585.0000 -1116.0000 -337.5000;
  -663.0000 -1131.0000 -220.5000;
  -747.0000 -1098.0000 -90.0000;
  -882.0000 -873.0000 90.0000;
  -928.5000 -796.5000 109.5000;
  -976.5000 -702.0000 118.5000;
  -1086.0000 -463.5000 67.5000;
  -1143.0000 -387.0000 -9.0000;
  -1171.5000 -355.5000 -49.5000;
  -1206.0000 -352.5000 -114.0000;
  -1237.5000 -366.0000 -130.5000;
  -1270.5000 -423.0000 -121.5000;
  -1284.0000 -463.5000 -94.5000;
  -1282.5000 -508.5000 -45.0000;
  -1252.5000 -553.5000 9.0000;
  -1225.5000 -549.0000 51.0000;
  -1167.0000 -571.5000 91.5000;
  -1081.5000 -577.5000 130.5000;
  -775.5000 -567.0000 99.0000;
  -703.5000 -514.5000 69.0000;
  -679.5000 -441.0000 36.0000;
  -697.5000 -402.0000 31.5000;
  -775.5000 -334.5000 22.5000;
  -922.5000 -343.5000 18.0000;
  -976.5000 -343.5000 9.0000;
  -1030.5000 -346.5000 -10.5000;
  -1143.0000 -387.0000 -9.0000;
  -1167.0000 -411.0000 -45.0000;
  -1207.5000 -432.0000 -46.5000;
  -1248.0000 -513.0000 -55.5000;
  -1273.5000 -573.0000 -31.5000;
  -1260.0000 -589.5000 13.5000;
  -1233.0000 -567.0000 36.0000;
  -1122.0000 -532.5000 127.5000;
  -1017.0000 -526.5000 130.5000;
  -825.0000 -528.0000 100.5000;
  -747.0000 -522.0000 94.5000;
  -667.5000 -514.5000 55.5000;
  -600.0000 -483.0000 33.0000;
  -567.0000 -468.0000 -1.5000;
  -546.0000 -373.5000 -67.5000;
  -550.5000 -357.0000 -81.0000;
  -567.0000 -328.5000 -90.0000;
  -654.0000 -310.5000 -54.0000;
  -693.0000 -312.0000 -15.0000;
  -802.5000 -337.5000 42.0000;
  -810.0000 -352.5000 46.5000;
  -747.0000 -364.5000 45.0000;
  -688.5000 -382.5000 24.0000;
  -535.5000 -478.5000 -36.0000;
  -424.5000 -513.0000 -118.5000;
  -397.5000 -477.0000 -141.0000;
  -460.5000 -405.0000 -96.0000;
  -481.5000 -409.5000 -46.5000;
  -618.0000 -423.0000 54.0000;
  -829.5000 -418.5000 85.5000;
  -942.0000 -361.5000 36.0000;
  -1023.0000 -316.5000 4.5000;
  -1090.5000 -213.0000 -145.5000;
  -1000.5000 -154.5000 -396.0000;
  -946.5000 -154.5000 -438.0000;
  -897.0000 -184.5000 -495.0000;
  -828.0000 -163.5000 -474.0000;
  -801.0000 -145.5000 -420.0000;
  -774.0000 -135.0000 -238.5000;
  -829.5000 -193.5000 -105.0000;
  -895.5000 -180.0000 -157.5000;
  -954.0000 -166.5000 -253.5000;
  -1036.5000 -225.0000 -468.0000;
  -1032.0000 -231.0000 -460.5000;
  -1084.5000 -267.0000 -378.0000;
  -1279.5000 -544.5000 -175.5000;
  -1314.0000 -693.0000 -144.0000;
  -1315.5000 -843.0000 -132.0000;
  -1306.5000 -973.5000 -159.0000;
  -1287.0000 -1077.0000 -195.0000;
  -1264.5000 -1134.0000 -220.5000;
  -1260.0000 -1021.5000 -253.5000;
  -1336.5000 -774.0000 -333.0000;
  -1350.0000 -649.5000 -387.0000;
  -1275.0000 -447.0000 -459.0000;
  -1242.0000 -393.0000 -456.0000;
  -1212.0000 -411.0000 -447.0000;
  -1225.5000 -627.0000 -451.5000;
  -1237.5000 -733.5000 -442.5000;
  -1224.0000 -829.5000 -438.0000;
  -1174.5000 -999.0000 -441.0000;
  -1162.5000 -978.0000 -405.0000;
  -1206.0000 -877.5000 -402.0000;
  -1261.5000 -589.5000 -474.0000;
  -1246.5000 -487.5000 -532.5000;
  -1171.5000 -432.0000 -580.5000;
  -1089.0000 -400.5000 -604.5000;
  -963.0000 -391.5000 -622.5000;
  -936.0000 -370.5000 -616.5000;
  -933.0000 -346.5000 -612.0000;
  -918.0000 -301.5000 -568.5000;
  -996.0000 -249.0000 -441.0000;
  -1180.5000 -420.0000 -294.0000;
  -1275.0000 -580.5000 -240.0000;
  -1318.5000 -724.5000 -213.0000;
  -1255.5000 -879.0000 -148.5000;
  -1239.0000 -924.0000 -103.5000;
  -1194.0000 -963.0000 -69.0000;
  -1093.5000 -1054.5000 -55.5000;
  -1026.0000 -1090.5000 -72.0000;
  -973.5000 -1102.5000 -67.5000;
  -945.0000 -1107.0000 -63.0000;
  -877.5000 -1111.5000 -63.0000;
  -717.0000 -1108.5000 -82.5000;
  -688.5000 -1116.0000 -99.0000;
  -720.0000 -1147.5000 -96.0000;
  -958.5000 -1057.5000 -81.0000;
  -1057.5000 -985.5000 -60.0000;
  -1174.5000 -855.0000 -28.5000;
  -1251.0000 -679.5000 -22.5000;
  -1314.0000 -550.5000 -37.5000;
  -1293.0000 -477.0000 -27.0000;
  -1252.5000 -424.5000 -1.5000;
  -1225.5000 -454.5000 15.0000;
  -1260.0000 -666.0000 33.0000;
  -1257.0000 -829.5000 13.5000;
  -1153.5000 -1018.5000 -15.0000;
  -1089.0000 -1071.0000 -27.0000;
  -1023.0000 -1062.0000 1.5000;
  -960.0000 -915.0000 81.0000;
  -1048.5000 -760.5000 94.5000;
  -1102.5000 -760.5000 81.0000;
  -1117.5000 -807.0000 76.5000;
  -1147.5000 -850.5000 31.5000;
  -1170.0000 -901.5000 -15.0000;
  -1188.0000 -945.0000 -54.0000;
  -1171.5000 -967.5000 -64.5000;
  -1143.0000 -1009.5000 -60.0000;
  -1102.5000 -1036.5000 -18.0000;
  -1044.0000 -1050.0000 -1.5000;
  -882.0000 -1023.0000 54.0000;
  -814.5000 -981.0000 64.5000;
  -756.0000 -924.0000 81.0000;
  -715.5000 -861.0000 94.5000;
  -688.5000 -648.0000 153.0000;
  -721.5000 -577.5000 172.5000;
  -805.5000 -400.5000 117.0000;
  -846.0000 -261.0000 40.5000;
  -877.5000 -180.0000 -37.5000;
  -906.0000 -153.0000 -103.5000;
  -949.5000 -123.0000 -337.5000;
  -954.0000 -132.0000 -418.5000;
  -936.0000 -162.0000 -477.0000;
  -909.0000 -294.0000 -613.5000;
  -891.0000 -360.0000 -658.5000;
  -855.0000 -330.0000 -648.0000;
  -789.0000 -366.0000 -663.0000;
  -771.0000 -442.5000 -685.5000;
  -747.0000 -505.5000 -699.0000;
  -748.5000 -571.5000 -702.0000;
];

%% --- Calibration and Plotting Script for Magnetometer Data ---

% Ensure rawData (N x 3 matrix) is in the workspace.
if ~exist('rawData','var')
    error('Variable "rawData" not found. Please load your magnetometer raw data (N x 3).');
end

%% 1. Fit the ellipsoid to the raw data
ellipsoidFit = ellipsoid_fit_direct(rawData);

%% 2. Compute calibration parameters
% Hard-iron bias is the ellipsoid center.
bias = ellipsoidFit.center;
disp(bias);

% Soft-iron correction maps the ellipsoid to a unit sphere.
softIronMatrix = ellipsoidFit.rotation * diag(1./ellipsoidFit.axes) * ellipsoidFit.rotation';
disp(softIronMatrix);

% Apply calibration: for each raw data point, subtract bias then apply softIronMatrix.
correctedData = (softIronMatrix * (rawData' - bias))';

%% 3. Plotting

figure;

% --- Left Subplot: Raw Data with Fitted Ellipsoid ---
subplot(1,2,1);
scatter3(rawData(:,1), rawData(:,2), rawData(:,3), 20, 'b', 'filled');
hold on;
grid on;
axis equal;
xlabel('X'); ylabel('Y'); zlabel('Z');
title('Raw Data with Fitted Ellipsoid');

% Generate a mesh for the fitted ellipsoid.
[phi, theta] = meshgrid(linspace(0,2*pi,50), linspace(0,pi,50));
x_unit = cos(phi).*sin(theta);
y_unit = sin(phi).*sin(theta);
z_unit = cos(theta);

% Scale by the ellipsoid axes.
a = ellipsoidFit.axes(1);
b = ellipsoidFit.axes(2);
c = ellipsoidFit.axes(3);
x_ell = a * x_unit;
y_ell = b * y_unit;
z_ell = c * z_unit;

% Rotate and translate the ellipsoid.
ellipsoidMesh = [x_ell(:)'; y_ell(:)'; z_ell(:)'];
ellipsoidMesh = ellipsoidFit.rotation * ellipsoidMesh;
x_ell = reshape(ellipsoidMesh(1,:) + ellipsoidFit.center(1), size(x_unit));
y_ell = reshape(ellipsoidMesh(2,:) + ellipsoidFit.center(2), size(y_unit));
z_ell = reshape(ellipsoidMesh(3,:) + ellipsoidFit.center(3), size(z_unit));

% Plot the ellipsoid surface.
surf(x_ell, y_ell, z_ell, 'FaceAlpha', 0.3, 'EdgeColor', 'none', 'FaceColor', 'g');
legend('Raw Data', 'Fitted Ellipsoid');

% --- Right Subplot: Corrected Data with Unit Sphere ---
subplot(1,2,2);
scatter3(correctedData(:,1), correctedData(:,2), correctedData(:,3), 20, 'r', 'filled');
hold on;
grid on;
axis equal;
xlabel('X'); ylabel('Y'); zlabel('Z');
title('Calibrated Data with Unit Sphere');

% Generate a unit sphere (centered at the origin).
% MATLAB's built-in sphere function creates a unit sphere.
[x_sphere, y_sphere, z_sphere] = sphere(50);
surf(x_sphere, y_sphere, z_sphere, 'FaceAlpha', 0.3, 'EdgeColor', 'none', 'FaceColor', 'g');
legend('Corrected Data', 'Unit Sphere');

sgtitle('Before vs. After Magnetometer Calibration');


% %% Example Script: Compare Raw and Calibrated Magnetometer Data
% 
% % Assume rawData is an N x 3 matrix already loaded in your workspace.
% if ~exist('rawData','var')
%     error('Variable rawData not found. Please load your magnetometer raw data (N x 3).');
% end
% 
% % Compute calibration parameters.
% [bias, softIronMatrix] = calibrateMagnetometer(rawData);
% 
% % Apply calibration to each raw data point.
% % For each measurement: x_corrected = softIronMatrix*(x_raw - bias)
% correctedData = (softIronMatrix * (rawData' - bias))';
% 
% %% Plot side by side
% 
% figure;
% 
% % Raw Data Plot (Expected to form an ellipsoid)
% subplot(1,2,1);
% scatter3(rawData(:,1), rawData(:,2), rawData(:,3), 20, 'b', 'filled');
% title('Raw Magnetometer Data');
% xlabel('X'); ylabel('Y'); zlabel('Z');
% grid on;
% axis equal;
% 
% % Calibrated Data Plot (Should be more spherical & centered at 0)
% subplot(1,2,2);
% scatter3(correctedData(:,1), correctedData(:,2), correctedData(:,3), 20, 'r', 'filled');
% title('Calibrated Magnetometer Data');
% xlabel('X'); ylabel('Y'); zlabel('Z');
% grid on;
% axis equal;
% 
% sgtitle('Before (Ellipsoid) vs. After (Sphere) Magnetometer Calibration');


function rawData = generateSyntheticEllipsoidData(numTheta, numPhi)
% generateSyntheticEllipsoidData Generates synthetic data on an ellipsoid.
%
%   rawData = generateSyntheticEllipsoidData(numTheta, numPhi)
%
%   Inputs:
%     numTheta - Number of points along the theta (azimuth) direction.
%     numPhi   - Number of points along the phi (elevation) direction.
%
%   Output:
%     rawData  - An N x 3 matrix of [x, y, z] points lying on the ellipsoid.
%
%   The ellipsoid is defined with:
%     Center: [2, -1, 3]
%     Semi-axes: [5, 3, 2]  (i.e., a = 5, b = 3, c = 2)
%
%   Example:
%     rawData = generateSyntheticEllipsoidData(50, 50);
%     scatter3(rawData(:,1), rawData(:,2), rawData(:,3), '.');
%     axis equal; grid on; xlabel('X'); ylabel('Y'); zlabel('Z');

    % Set default values if not provided.
    if nargin < 1
        numTheta = 50;
    end
    if nargin < 2
        numPhi = 50;
    end

    % Ellipsoid parameters
    a = 5; b = 3; c = 2;      % Semi-axis lengths
    cx = 2; cy = -1; cz = 3;   % Center coordinates

    % Create a grid for theta and phi.
    theta = linspace(0, 2*pi, numTheta);
    phi   = linspace(0, pi, numPhi);
    [THETA, PHI] = meshgrid(theta, phi);

    % Compute the (x,y,z) coordinates for each (theta,phi)
    X = a * sin(PHI) .* cos(THETA) + cx;
    Y = b * sin(PHI) .* sin(THETA) + cy;
    Z = c * cos(PHI) + cz;

    % Reshape the grids into a list of points (N x 3)
    rawData = [X(:), Y(:), Z(:)];
end


function [bias, softIronMatrix] = calibrateMagnetometer(rawData)
% calibrateMagnetometer Computes magnetometer calibration parameters.
%
%   [bias, softIronMatrix] = calibrateMagnetometer(rawData)
%
%   rawData is an N x 3 matrix of magnetometer measurements.
%
%   This function fits an ellipsoid to the raw data using the direct least
%   squares method (ellipsoid_fit_direct), then extracts:
%     - bias: the hard-iron offset (ellipsoid center)
%     - softIronMatrix: the transformation matrix that maps the ellipsoid
%         to a unit sphere.
%
%   The corrected data is computed as:
%       x_corrected = softIronMatrix*(x_raw - bias)
%
%   Note: Ensure that ellipsoid_fit_direct is in your MATLAB path.

    % Fit an ellipsoid to the raw data.
    ellipsoidFit = ellipsoid_fit_direct(rawData);
    
    % Hard-iron bias is the ellipsoid center.
    bias = ellipsoidFit.center;
    
    % Soft-iron correction: We want to map the ellipsoid:
    %   (x - center)' * A_norm * (x - center) = 1
    % to a unit sphere. The eigen-decomposition in ellipsoidFit gives the
    % semi-axis lengths as ellipsoidFit.axes and orientation as ellipsoidFit.rotation.
    % Hence, the correction matrix is:
    softIronMatrix = ellipsoidFit.rotation * diag(1./ellipsoidFit.axes) * ellipsoidFit.rotation';
end

function ellipsoid = ellipsoid_fit_direct(points)
% ellipsoid_fit_direct  Direct least squares ellipsoid fit.
%
%   ellipsoid = ellipsoid_fit_direct(points)
%
%   Input:
%     points - an N x 3 array of [x, y, z] data.
%
%   Output (structure 'ellipsoid'):
%     .center      - 3x1 vector with ellipsoid center.
%     .axes        - 3x1 vector with the semi-axes lengths.
%     .rotation    - 3x3 rotation matrix (columns are principal directions).
%     .v           - 10x1 vector of fitted algebraic parameters.
%
%   The ellipsoid is assumed to satisfy the quadratic equation:
%
%     v(1)*x^2 + v(2)*y^2 + v(3)*z^2 + v(4)*xy + v(5)*xz + v(6)*yz + ...
%     v(7)*x + v(8)*y + v(9)*z + v(10) = 0.
%
%   This function sets up the design matrix and solves the generalized
%   eigenvalue problem:
%
%     S * v = lambda * C * v,
%
%   where S = D'*D and the 10x10 constraint matrix C is defined so that
%   the quadratic form represents an ellipsoid.
%
%   Reference: A version of "Direct Least Square Fitting of Ellipsoids"
%   (there are several variants; see e.g. Li & Griffiths).
%

    % Extract coordinates
    x = points(:,1);
    y = points(:,2);
    z = points(:,3);
    
    % Build design matrix D (each row corresponds to one point):
    % Columns: x^2, y^2, z^2, x*y, x*z, y*z, x, y, z, 1.
    D = [ x.^2, y.^2, z.^2, x.*y, x.*z, y.*z, x, y, z, ones(size(x)) ];
    
    % Scatter matrix: S = D'*D.
    S = D' * D;
    
    % Build the 10x10 constraint matrix C.
    % The constraint is imposed only on the quadratic (first 6) terms.
    % Here we use a common choice:
    %
    %      [ 1   0   0    0    0    0 ]
    %      [ 0   1   0    0    0    0 ]
    %  C = [ 0   0   1    0    0    0 ]   and zeros in the remaining rows/cols.
    %      [ 0   0   0   2    0    0 ]
    %      [ 0   0   0    0   2    0 ]
    %      [ 0   0   0    0    0   2 ]
    %
    % Then embed this 6x6 block into a 10x10 matrix.
    C = zeros(10,10);
    C(1,1) = 1; 
    C(2,2) = 1; 
    C(3,3) = 1;
    C(4,4) = 2;
    C(5,5) = 2;
    C(6,6) = 2;
    % The remaining (linear and constant) terms are unconstrained (zeros).
    
    % Solve the generalized eigenvalue problem:
    %     S*v = lambda * C*v.
    [eig_vec, eig_val] = eig(S, C);
    
    % Extract eigenvalues (as a vector)
    eig_val = diag(eig_val);
    
    % Select the eigenvector corresponding to the smallest positive eigenvalue.
    pos = find(eig_val > 0 & ~isinf(eig_val));
    if isempty(pos)
        error('No positive eigenvalue found. Check your data for sufficient coverage.');
    end
    [~, minidx] = min(eig_val(pos));
    v = eig_vec(:, pos(minidx));
    
    % Ensure v is real (it should be, if the fit is valid)
    v = real(v);
    
    % The fitted parameters are now in v:
    %   v = [a, b, c, d, e, f, g, h, i, j]' such that:
    %   a*x^2 + b*y^2 + c*z^2 + d*x*y + e*x*z + f*y*z + g*x + h*y + i*z + j = 0.
    
    % Form the symmetric matrix A for the quadratic form:
    A_mat = [ v(1)      v(4)/2   v(5)/2;
              v(4)/2    v(2)     v(6)/2;
              v(5)/2    v(6)/2   v(3)   ];
          
    % Linear part:
    b_vec = [ v(7); v(8); v(9) ];
    
    % The constant:
    j_const = v(10);
    
    % Compute the ellipsoid center:
    center = -0.5 * (A_mat \ b_vec);
    
    % Form the translated constant:
    % Plug center into the quadratic form:
    T = center' * A_mat * center - j_const;
    
    % To get the ellipsoid in the standard form, normalize:
    % (x-center)' * (A_mat/T) * (x-center) = 1.
    A_norm = A_mat / T;
    
    % The eigen-decomposition of A_norm gives the axes directions and squared
    % reciprocals of the squared axes lengths.
    [V_eig, D_eig] = eig(A_norm);
    
    % The semi-axis lengths are:
    axes_lengths = 1 ./ sqrt(diag(D_eig));
    
    % Store results in a structure.
    ellipsoid.center   = center;
    ellipsoid.axes     = axes_lengths;
    ellipsoid.rotation = V_eig;
    ellipsoid.v        = v;
end